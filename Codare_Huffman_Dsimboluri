import heapq

class Node:
    def __init__(self, prob, symb, D):
        self.prob = prob
        self.symb = symb
        self.children = []  # Lista de copii
        self.D = D

    def __lt__(self, other):
        if self.prob == other.prob:
            return self.symb < other.symb
        return self.prob < other.prob

def build_tree(probabilities, symbols, D):
    frunze = []
    # Dacă numărul de simboluri nu este corect, adăugăm simboluri goale și probabilități 0
    while (len(symbols) - D) % (D - 1) != 0:
        symbols.append('')
        probabilities.append(0)

    # Creăm frunzele
    for i in range(len(symbols)):
        frunze.append(Node(probabilities[i], symbols[i], D))

    heapq.heapify(frunze)  # Transformăm lista de frunze într-un heap

    while len(frunze) > 1:
        simboluri = ''
        probabilitati = 0
        copii = []

        # Extragem D noduri cu cele mai mici probabilități
        for i in range(D):
            nod = heapq.heappop(frunze)
            simboluri += str(nod.symb)
            probabilitati += nod.prob
            copii.append(nod)

        parinte = Node(probabilitati, simboluri, D)
        parinte.children = copii  # Atribuim copiii nodului părinte

        heapq.heappush(frunze, parinte)  # Adăugăm nodul părinte în heap

    return frunze[0]  # Ultimul nod rămas este rădăcina arborelui

def encode(dex, nod, cod):
    if len(nod.children) == 0:  # Este o frunză
        dex[nod.symb] = cod
    else:
        for i in range(len(nod.children)):
            # Adăugăm codul corespunzător fiecărui copil
            encode(dex, nod.children[i], cod + str(i))

def f(text, D):
    dex = {}
    for i in text:
        if i not in dex:
            dex[i] = 1
        else:
            dex[i] += 1

    symb = list(dex.keys())
    prob = list(dex.values())

    # Normalizăm probabilitățile
    for i in range(len(prob)):
        prob[i] = prob[i] / len(text)

    radacina = build_tree(prob, symb, D)  # Construim arborele Huffman
    codul = {}
    encode(codul, radacina, '')  # Generăm codurile Huffman pentru fiecare simbol

    textul = ''
    for i in text:
        textul += codul[i]  # Construim textul codificat

    return textul

text = 'ANA ARE MERE'
D = 3
print(f(text, D))
